// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    userProduct   userProduct[]
    Order         Order[]
    Cart          Cart[]
}

model Product {
    id          Int      @id @default(autoincrement())
    name        String //商品名称
    price       Float //价格
    stock       Int      @default(0) //库存
    description String? //描述
    imageUrl    String? //图片
    categoryId  Int //分类
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    userProduct userProduct[]
    category    Category      @relation(fields: [categoryId], references: [id])
    Order       Order[]
    CartItem    CartItem[]

    @@index([name])
    @@index([categoryId])
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]

    @@index([name])
}

model userProduct {
    id        Int    @id @default(autoincrement())
    userId    String
    productId Int

    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id])
}

model Order {
    id        Int         @id @default(autoincrement())
    userId    String
    status    OrderStatus
    productId Int
    amount    Decimal
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    user      User        @relation(fields: [userId], references: [id])
    product   Product     @relation(fields: [productId], references: [id])
}

//购物车 

model Cart {
    id        Int        @id @default(autoincrement())
    userId    String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    user      User       @relation(fields: [userId], references: [id])
    items     CartItem[]
}

model CartItem {
    id        Int     @id @default(autoincrement())
    productId Int
    cartId    Int
    quantity  Int
    product   Product @relation(fields: [productId], references: [id])
    cart      Cart    @relation(fields: [cartId], references: [id])

    @@unique([cartId, productId])
    @@index([cartId])
    @@index([productId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum OrderStatus {
    PENDING
    SHIPPED
    COMPLETED
    CANCELLED
}
